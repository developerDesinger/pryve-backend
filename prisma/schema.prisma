generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id           String    @id @default(cuid())
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  fullName     String?
  profilePhoto String?   @default("default-profile.png")
  email        String    @unique
  password     String?
  role         Role      @default(CLIENT)
  status       Status    @default(ACTIVE)
  otp          String?
  otpCreatedAt DateTime  @default(now())
  userName     String?   @unique
  loginType    LoginType @default(EMAIL)
  firstName    String?
  lastName     String?
  
  // Additional profile fields
  gender       Gender?
  dateOfBirth  DateTime?
  country      String?
  region       String?

  
  // Test field to demonstrate auto-sync
  phoneNumber  String?
  
  // New field for testing update functionality
  bio          String?
  
  // Account deletion tracking
  isDeleted    Boolean   @default(false)
  deletedAt    DateTime?

  // Chat relationships
  chats            Chat[]
  sentMessages     Message[]
  messageReactions MessageReaction[]
  readReceipts     MessageReadReceipt[]
  mediaLibrary     MediaLibrary[]
  favoriteMessages UserMessageFavorite[]

  @@map("users")
}

model Chat {
  id          String   @id @default(cuid())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  // Chat basic info
  name        String?
  description String?
  type        ChatType @default(PERSONAL_AI)
  isActive    Boolean  @default(true)
  
  // Account deletion tracking
  isDeleted    Boolean   @default(false)
  deletedAt    DateTime?
  
  // Owner of the chat (one-to-one with user)
  userId      String
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  // Messages in this chat
  messages    Message[]
  mediaFiles  MediaLibrary[]
  
  // Chat metadata
  lastMessageAt DateTime?
  lastMessage   String?
  messageCount   Int      @default(0)
  
  // AI Chat specific fields
  aiModel       String?  // GPT-4, GPT-3.5, etc.
  systemPrompt  String?  // Custom system prompt for this chat
  temperature   Float?   // AI response temperature
  
  @@map("chats")
}

model Message {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  // Message content
  content   String?
  type      MessageType @default(TEXT)
  status    MessageStatus @default(SENT)
  
  // Relationships
  chatId    String
  senderId  String
  chat      Chat     @relation(fields: [chatId], references: [id], onDelete: Cascade)
  sender    User     @relation(fields: [senderId], references: [id], onDelete: Cascade)
  
  // Media files (stored in S3)
  imageUrl     String? // URL for image files
  audioUrl     String? // URL for audio files
  videoUrl     String? // URL for video files
  fileUrl      String? // URL for other file types
  
  // Media metadata
  mediaType    String? // MIME type
  mediaSize    Int?    // File size in bytes
  mediaDuration Int?   // For audio/video files in seconds
  mediaName    String? // Original filename
  
  // Message metadata
  replyToId    String?
  replyTo      Message? @relation("MessageReplies", fields: [replyToId], references: [id])
  replies      Message[] @relation("MessageReplies")
  
  // Message reactions
  reactions    MessageReaction[]
  
  // Read receipts
  readReceipts MessageReadReceipt[]
  
  // Message favorites
  favoritedBy  UserMessageFavorite[]
  
  // Message editing
  editedAt     DateTime?
  editedContent String?
  
  // AI specific fields
  isFromAI     Boolean  @default(false)
  aiModel      String?  // Which AI model generated this response
  tokensUsed   Int?     // Number of tokens used for this message
  processingTime Int?   // Time taken to generate response in ms
  
  // Emotion detection fields
  emotion      String?  // Detected emotion (joy, sadness, anger, fear, surprise, disgust, neutral)
  emotionConfidence Float? // Confidence score for emotion detection (0-1)
  
  // Account deletion tracking
  isDeleted    Boolean   @default(false)
  deletedAt    DateTime?
  
  @@map("messages")
}

model MessageReaction {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  
  // Relationships
  messageId String
  userId    String
  message   Message @relation(fields: [messageId], references: [id], onDelete: Cascade)
  user      User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  // Reaction details
  emoji     String
  
  @@unique([messageId, userId])
  @@map("message_reactions")
}

model MessageReadReceipt {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  
  // Relationships
  messageId String
  userId    String
  message   Message @relation(fields: [messageId], references: [id], onDelete: Cascade)
  user      User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  // Read status
  readAt    DateTime @default(now())
  
  @@unique([messageId, userId])
  @@map("message_read_receipts")
}

model UserMessageFavorite {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  // Relationships
  messageId String
  userId    String
  message   Message @relation(fields: [messageId], references: [id], onDelete: Cascade)
  user      User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@unique([messageId, userId])
  @@map("user_message_favorites")
}

enum Role {
  ADMIN
  CLIENT
}

enum Status {
  ACTIVE
  INACTIVE
}

enum LoginType {
  EMAIL
  GOOGLE
  APPLE
  FACEBOOK
}

enum Gender {
  MALE
  FEMALE
  OTHER
  PREFER_NOT_TO_SAY
}

enum MessageType {
  TEXT
  IMAGE
  AUDIO
  VIDEO
  FILE
  AI_RESPONSE
}

enum MessageStatus {
  SENT
  DELIVERED
  READ
  FAILED
  PROCESSING
}

enum ChatType {
  PERSONAL_AI
  ASSISTANT
}

model MediaLibrary {
  id          String   @id @default(cuid())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  // File information
  fileName    String
  originalName String
  filePath    String
  fileUrl     String
  fileType    String   // 'images', 'audio', 'videos', 'documents'
  mimeType    String
  fileSize    Int
  
  // Relationships
  userId      String
  chatId      String?
  messageId   String?
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  chat        Chat?    @relation(fields: [chatId], references: [id], onDelete: Cascade)
  
  // Metadata
  uploadedAt  DateTime @default(now())
  
  // Account deletion tracking
  isDeleted    Boolean   @default(false)
  deletedAt    DateTime?
  
  @@map("media_library")
}

model ToneProfile {
  id                    String   @id @default(cuid())
  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt
  
  // Basic Profile Info
  name                  String
  description           String
  icon                  String
  isActive              Boolean  @default(false)
  
  // Core Identity (Tone-specific)
  coreIdentity          String
  
  // Safety Guidelines (Tone-specific)
  safetyGuidelines      String[]
  
  // Tone Instructions (Tone-specific)
  comfortingInstructions String
  
  // Tone Settings (Tone-specific)
  maxWords              Int      @default(150)
  responseStyle         String   @default("Conversational")
  bannedWords           String[]
  
  // Mood-to-Tone Routing (Tone-specific)
  moodToToneRouting     Json
  
  @@map("tone_profiles")
}

model EmotionalRule {
  id            String   @id @default(cuid())
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  
  // Basic Rule Info
  trigger       String   // e.g., "anxiety", "stress", "sadness"
  responseType  String   // e.g., "Soft comfort tone", "Supportive response"
  tone          String   // e.g., "Calm & reassuring", "Empathetic"
  description   String   // Detailed description of the rule
  
  // Rule Settings
  isActive      Boolean  @default(true)
  priority      Int      @default(1) // Higher number = higher priority
  
  @@map("emotional_rules")
}

model AIConfig {
  id                    String   @id @default(cuid())
  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt
  
  // AI Personality Configuration
  systemPrompt          String?  // Core AI personality and behavior
  systemPromptActive    Boolean  @default(false)
  contextNeededMessage  String?  // Fallback message when more context is needed
  contextNeededActive   Boolean  @default(false)
  technicalErrorMessage String?  // Fallback message for technical errors
  technicalErrorActive  Boolean  @default(false)
  
  @@map("ai_configs")
}
